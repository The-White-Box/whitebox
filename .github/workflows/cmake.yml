# Copyright (c) 2021 The WhiteBox Authors.  All rights reserved.
# Use of this source code is governed by a 3-Clause BSD license that can be
# found in the LICENSE file.
#
# Continuous integration.

name: Build and Test

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - 'assets/**'

  pull_request:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - 'assets/**'

jobs:
  build:
    name: Build and Test

    strategy:
      fail-fast: false
      matrix:
        build: [ Release, Debug ]
        os: [ macos-latest, ubuntu-latest, windows-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Install dependencies (Ubuntu)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install wayland-protocols \
          pkg-config \
          ninja-build \
          libasound2-dev \
          libdbus-1-dev \
          libegl1-mesa-dev \
          libgl1-mesa-dev \
          libgles2-mesa-dev \
          libglu1-mesa-dev \
          libibus-1.0-dev \
          libpulse-dev \
          libsdl2-2.0-0 \
          libsndio-dev \
          libudev-dev \
          libwayland-dev \
          libwayland-client++0 \
          wayland-scanner++ \
          libwayland-cursor++0 \
          libx11-dev \
          libxcursor-dev \
          libxext-dev \
          libxi-dev \
          libxinerama-dev \
          libxkbcommon-dev \
          libxrandr-dev \
          libxss-dev \
          libxt-dev \
          libxv-dev \
          libxxf86vm-dev \
          libdrm-dev \
          libgbm-dev \
          libpulse-dev \
          libpango1.0-dev

      - name: Configure (MacOS)
        if: ${{ matrix.os == 'macos-latest' }}
        run: cmake -B ${{ github.workspace }}/out -Wdev -Werror=dev -DADD_FATAL_EXAMPLE=OFF -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCHANGE_G3LOG_DEBUG_TO_DBUG=ON -DDEBUG_BREAK_AT_FATAL_SIGNAL=ON -Dgtest_hide_internal_symbols=ON -DINSTALL_GTEST=OFF -DMI_BUILD_OBJECT=OFF -DMI_BUILD_STATIC=ON -DMI_BUILD_TESTS=ON -DMI_SECURE=ON -DWB_BUILD_TESTS=ON

      - name: Configure (Ubuntu)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: cmake -B ${{ github.workspace }}/out -Wdev -Werror=dev -DADD_FATAL_EXAMPLE=OFF -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCHANGE_G3LOG_DEBUG_TO_DBUG=ON -DDEBUG_BREAK_AT_FATAL_SIGNAL=ON -Dgtest_hide_internal_symbols=ON -DINSTALL_GTEST=OFF -DMI_BUILD_OBJECT=OFF -DMI_BUILD_STATIC=ON -DMI_BUILD_TESTS=ON -DMI_SECURE=ON -DWB_BUILD_TESTS=ON -DWB_GCC_ENABLE_WARNING_WUNDEF=OFF

      - name: Configure (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: cmake -B ${{ github.workspace }}\out -Wdev -Werror=dev -DADD_FATAL_EXAMPLE=OFF -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCHANGE_G3LOG_DEBUG_TO_DBUG=ON -DDEBUG_BREAK_AT_FATAL_SIGNAL=ON -Dgtest_hide_internal_symbols=ON -DINSTALL_GTEST=OFF -DMI_BUILD_OBJECT=OFF -DMI_BUILD_STATIC=ON -DMI_BUILD_TESTS=ON -DMI_SECURE=ON -DWB_BUILD_TESTS=ON -DWB_MSVC_CXX_LANGUAGE_VERSION="c++latest"

      - name: Build
        run: cmake --build ${{ github.workspace }}/out --config ${{ matrix.build }} --parallel

      - name: Test
        working-directory: ${{ github.workspace }}/out
        run: ctest -C ${{ matrix.build }}
